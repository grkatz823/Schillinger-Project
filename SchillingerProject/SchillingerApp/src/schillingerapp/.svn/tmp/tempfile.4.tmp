/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package schillingerapp;

import javax.sound.midi.*;
import org.jfugue.*;
import java.io.*;

/**
 *
 * @author prhayman
 */
public class TestHarness {

    public void showNoteValues(String musicString) {

        System.out.println("MusicString: \n" + musicString);
        // Same as last test, only it prints out the melody values instead of rhythm.
        ParseMelody melodyparser = new ParseMelody();

        System.out.print("becomes: \n");

        for (int i = 0; i < musicString.length(); i++) {
            if (musicString.charAt(i) == '/') {
                System.out.print("" + musicString.charAt(i - 2) + musicString.charAt(i - 1) + ", ");
            }
        }

        System.out.println();

        int[] values = melodyparser.getNoteValues(musicString);
        for (int i = 0; i < values.length; i++) {
            if (i != values.length - 1) {
                System.out.print(values[i] + ", ");
            } else {
                System.out.print(values[i]);
            }
        }
        System.out.println();
        System.out.println();

    }

    /**
     *  This block reads in a SchillingerPattern from a SchillingerDatabase.
     *  It then creates a binaryPattern, which becomes a musicString.  That musicstring
     *  is saved as a midi, then read back into the program, which matches it to
     *  the Proper Schillinger Pattern.
     * 
     * 
     * @param file
     */
    public void startToFinish(String file) {

        try {
            Player player = new Player();
            MusicGenerator musicMaker = new MusicGenerator();
            TimeNoteListener myListener = new TimeNoteListener();

            myListener.parseString(file);
            //          System.out.println(myListener.getParsedString());
            String testResults = musicMaker.generatePossibilities(myListener.getParsedString());
            player.saveMidi(testResults, new File(file));
        } catch (Exception e) {
        }

    }

    public void showTopMatchesAndOffset(int number, BinaryPattern binPat) {

        HitListDB hitlist = new HitListDB(binPat);
        hitlist.sortDB();
        hitlist.printHitListDB();
        System.out.println();
        hitlist.printTopMatches(number);

    }

    public void showBinaryPatternFromFile(String file) {
        Converter converter = new Converter();
        TimeNoteListener myListener = new TimeNoteListener();
        BinaryPattern binPat;

        try {
            myListener.parseString(file);
            String musicString = myListener.getParsedString();
            binPat = converter.convertMusicStringToBinaryPattern(musicString);

            System.out.print(binPat);

<<<<<<< .mine
        } catch (Exception e) {
            System.out.println("IO exception thrown when trying to read in " + file);
        }
=======
                System.out.println(binPat);
>>>>>>> .r174

    }

    public BinaryPattern getBinaryPatternFromFile(String file) {
        Converter converter = new Converter();
        TimeNoteListener myListener = new TimeNoteListener();
        BinaryPattern binPat;

        try {
            myListener.parseString(file);
            String musicString = myListener.getParsedString();
            binPat = converter.convertMusicStringToBinaryPattern(musicString);

            return binPat;

        } catch (Exception e) {
            System.out.println("IO exception thrown when trying to read in " + file);
            return null;
        }

    }

    public void printDatabaseMatches() {
        SchillingerDB database = new SchillingerDB();

        try {
            Converter converter = new Converter();
            Player player = new Player();
            TimeNoteListener myListener = new TimeNoteListener();

            for (int i = 0; i < database.size; i++) {
                myListener = new TimeNoteListener();
                BinaryPattern binPat = new BinaryPattern(database.getPatternFromDB(i), 0.25);
                System.out.println(binPat);
                String musicString = "V0 @0 T585 " + converter.convertBinaryPatternToMusicString(binPat, 0, 0);
                System.out.println("before: " + musicString);
                player.saveMidi(musicString, new File("SchDBTests" + i + ".mid"));
                myListener.parseString("SchDBTests" + i + ".mid");
                System.out.println("after: " + myListener.getParsedString());
                String parsedString = myListener.getParsedString();
                BinaryPattern newPat = converter.convertMusicStringToBinaryPattern(parsedString);
                System.out.println(newPat);

                HitListDB hitList = new HitListDB(newPat);
                hitList.sortDB();
                System.out.println("The Match for SchDB" + i + " is: " + hitList.hitListMatrix[0][0].getPatternIndex());
            }
        } catch (Exception e) {
        }

    }

<<<<<<< .mine
    public void printSchillingerPatternAndLength(int pattern) {
        SchillingerDB schDB = new SchillingerDB();
        int[] newPat = schDB.getPatternFromDB(pattern);



        System.out.print("Schillinger pattern at index " + pattern +
                " has length " + schDB.getPatternLengthFromDB(pattern) +
                " and binary pattern ");
        for (int i = 0; i < schDB.getPatternLengthFromDB(pattern); i++) {
            System.out.print(newPat[i]);
        }

        System.out.println();
    }
=======
    public void getRawMatchValues(int[] pitter, int[] patter){

        // Tests fuzzyMatcher
        BinaryPattern testArray = new BinaryPattern(pitter, 0.25);
        FuzzyMatcher matcher = new FuzzyMatcher();
        double[] hitArray = matcher.offsetMatch(testArray, patter, 5);
        System.out.println("testArray:");
        for (int i = 0; i < hitArray.length; i++) {
            System.out.print(hitArray[i] + ", ");
        }
        System.out.println();

    }

>>>>>>> .r174
}
