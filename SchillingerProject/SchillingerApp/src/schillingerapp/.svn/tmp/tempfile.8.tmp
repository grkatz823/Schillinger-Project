/*
 * SchillingerGUI.java
 *
 * Created on June 10, 2009, 3:19 PM
 */
package schillingerapp;

import javax.swing.*;
import java.awt.*;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author  anparks
 */
public class SchillingerGUI extends javax.swing.JFrame {

    public JFileChooser fc;
    public String input;
    public String output;
    public String key;
    public boolean findKey;

    /** Creates new form SchillingerGUI */
    public SchillingerGUI() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        inputLabel = new javax.swing.JLabel();
        generateMusicButton = new javax.swing.JButton();
        inputTextField = new javax.swing.JTextField();
        inputButton = new javax.swing.JButton();
        keyLabel = new javax.swing.JLabel();
        checkBox = new javax.swing.JCheckBox();
        keyField = new javax.swing.JTextField();
        outputLabel = new javax.swing.JLabel();
        resultTextField = new javax.swing.JTextField();
        resultButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inputLabel.setText("Please load midi File:");

        generateMusicButton.setText("Generate Music");
        generateMusicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMusicButtonActionPerformed(evt);
            }
        });

        inputTextField.setText("/home/prhayman/NetBeansProjects/SchillingerApp/fourBarMelody.mid");

        inputButton.setText("Browse");
        inputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputButtonActionPerformed(evt);
            }
        });

        keyLabel.setText("Please enter key: (Ex. AMajor)");

        checkBox.setSelected(true);
        checkBox.setText("Find Key automatically");

        outputLabel.setText("Save results as:");

        resultTextField.setText("TestResults.mid");
        resultTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultTextFieldActionPerformed(evt);
            }
        });

        resultButton.setText("Browse");
        resultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(resultTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputButton)
                            .addComponent(resultButton)))
                    .addComponent(keyLabel)
                    .addComponent(outputLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(keyField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBox)))
                .addContainerGap(57, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(238, 238, 238)
                .addComponent(generateMusicButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(inputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(outputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(keyLabel)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBox))
                .addGap(45, 45, 45)
                .addComponent(generateMusicButton)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void generateMusicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMusicButtonActionPerformed

    String rawInput = inputTextField.getText();
    String rawOutput = resultTextField.getText();
    findKey = checkBox.isSelected();
    key = keyField.getText();


    input = rawInput.substring(rawInput.lastIndexOf("/") + 1);
//    System.out.println("Input: " + rawInput + "\nOutput: " + rawOutput);
    output = rawOutput.substring(rawOutput.lastIndexOf("/") + 1);

<<<<<<< .mine
//    SchillingerDB database = new SchillingerDB();
//    database.printDatabase();
     TestHarness tester = new TestHarness();
     tester.startToFinish(input, output);
=======
    KeyFinder finder = new KeyFinder();
    int intKey = finder.stringToIndex(key);
>>>>>>> .r187

    TestHarness tester = new TestHarness();
    if(findKey){
        tester.startToFinish(input, output);
    }else{
        tester.startToFinish(input,output,intKey);
    }
    System.exit(0);

}//GEN-LAST:event_generateMusicButtonActionPerformed

private void inputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputButtonActionPerformed
    fc = new JFileChooser();
    fc.addChoosableFileFilter(new MidiFileFilter());

    if (evt.getSource() == inputButton) {
        int returnVal = fc.showOpenDialog(SchillingerGUI.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            input = fc.getSelectedFile().toString();
            inputTextField.setText(input);

            if (resultTextField.getText().equals("TestResults.mid")) {
                resultTextField.setText(getDirectory(input) + "TestResults.mid");
            }
        }
    }
}//GEN-LAST:event_inputButtonActionPerformed

private void resultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultButtonActionPerformed
    fc = new JFileChooser();
    fc.addChoosableFileFilter(new MidiFileFilter());


    if (evt.getSource() == resultButton) {
        int returnVal = fc.showOpenDialog(SchillingerGUI.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            output = fc.getSelectedFile().toString();
            resultTextField.setText(output);
        }
    }

}//GEN-LAST:event_resultButtonActionPerformed

private void resultTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultTextFieldActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_resultTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SchillingerGUI().setVisible(true);
                createAndShowGUI();
            }
        });
    }

    private static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("FileChooserDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Add content to the window.
//        frame.add(new SchillingerGUI());

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public String getDirectory(String fileName) {

        return fileName.substring(0, fileName.lastIndexOf("/") + 1);

    }

    public String getInputFile() {
        return input;
    }

    public String getOutputFile() {
        return output;
    }

    public Boolean findKey() {
        return findKey;
    }

    public String getKey() {
        return key;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBox;
    private javax.swing.JButton generateMusicButton;
    private javax.swing.JButton inputButton;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField keyField;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton resultButton;
    private javax.swing.JTextField resultTextField;
    // End of variables declaration//GEN-END:variables
}
