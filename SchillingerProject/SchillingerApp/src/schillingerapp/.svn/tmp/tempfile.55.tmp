package schillingerapp;

import org.jfugue.Pattern;
import org.jfugue.MusicStringParser;
import java.util.Enumeration;
import java.util.Vector;
import java.util.*;

/**
 * Contains several methods facilitating the conversion between the various
 * data forms used throughout the program. These include MelodyStruct, MusicString,
 * and BinaryPattern.
 *
 * @author parks
 */
public class Converter {

    /**
     * Takes in a musicString and returns a BinaryPattern representing the
     * rhythm pattern within the musicString.
     * 
     * @param musicString
     * @return The rhythm pattern of the given musicString as a BinaryPattern.
     */
    public BinaryPattern convertMusicStringToBinaryPattern(String musicString) {

        double[] durationsArray = this.getDurations(musicString);
        double leastCommonDenominator = this.findMin(durationsArray);
        int[] durationsIntArray = new int[durationsArray.length];
        int patternLength = 0;

        // convert decimal duration to integer ratios
        for (int i = 0; i < durationsArray.length; i++) {
            durationsIntArray[i] = (int) (durationsArray[i] / leastCommonDenominator);
        }

        // create an array with a length equal to the sum 
        // of all the elements of intArr
        for (int i = 0; i < durationsIntArray.length; i++) {
            patternLength += durationsIntArray[i];
        }
        int[] patternArr = new int[patternLength];

        // fill array with 1's and 0's
        int index = 0;
        for (int i = 0; i < durationsIntArray.length; i++) {
            patternArr[index] = 1;
            index++;
            for (int j = 1; j < durationsIntArray[i]; j++) {
                patternArr[index] = 0;
                index++;
            }
        }

        BinaryPattern binPattern = new BinaryPattern(patternArr, leastCommonDenominator);

        return binPattern;
    }

    /**
     * Converts a LilyPond file to a BinaryPattern.
     *
     * @param lily A text file containing LilyPond code
     * @return A binary pattern representation of the LilyPond file
     */
    public BinaryPattern convertLilyPondToBinaryPattern(LilyPond lily) {
        Vector<String> tokenStream = lily.tokenStream;
        double[] durationsArray = this.getDurations(tokenStream);
        double leastCommonDenominator = this.findMin(durationsArray);
        int[] baseTenArray = new int[durationsArray.length];
        int[] patternArray;

        // Divide each value in durationsArray by the leastCommonDenominator to
        // obtain an integer value.
        for (int i = 0; i < durationsArray.length; i++) {
            baseTenArray[i] = (int) (durationsArray[i] / leastCommonDenominator);
        }

        patternArray = this.convertBaseTenToBinary(baseTenArray);

        // Create a new BinaryPattern object to be returned
        BinaryPattern binaryPattern = new BinaryPattern(patternArray, leastCommonDenominator);
        return binaryPattern;
    }

    /**
     * Takes in a musicString and returns its rhythm pattern as a
     * double[] of durational values.
     *
     * @param musicString
     * @return A Double[] of the durational values of given musicString.
     */
    public double[] getDurations(String musicString) {

        Pattern pat = new Pattern(musicString);
        MusicStringParser parser = new MusicStringParser();

        String[] tokens = pat.getTokens();
        double[] durationArray = new double[tokens.length];

        // fill array with decimal durations
        for (int i = 0; i < tokens.length; i++) {
            durationArray[i] = (parser.getNote(tokens[i])).getDecimalDuration();
        }

        return durationArray;

    }

    /**
     * Parses out duration information from a vector string of note tokens, and
     * returns these durations as a double[].
     *
     * @param tokenStream Global variable created by LilyPond()
     * @return A double[] of durations; i.e., { 0.375, 0.125, 0.25, 0.25 }
     */
    public double[] getDurations(Vector<String> tokenStream) {
        double currentDuration = 0;
        double[] durationsArray = new double[tokenStream.capacity()];

        for (int i = 0; i < tokenStream.capacity(); i++) {
            String noteToken = tokenStream.elementAt(i);
            if (this.noteTokenContainsDuration(noteToken)) {
                if (noteToken.contains(".")) {
                    // current noteToken contains a dotted integer duration
                    currentDuration = parseDurationFromNoteToken(noteToken) / 1.5;
                } else {
                    // current noteToken contains an undotted integer duration
                    currentDuration = parseDurationFromNoteToken(noteToken);
                }
            } // else current noteToken contains no duration
            durationsArray[i] = 1 / currentDuration;
        }

        return durationsArray;
    }

    /**
     * Helper function for getDurations
     *
     * @param noteToken
     * @return
     */
    private int parseDurationFromNoteToken(String noteToken) {
        String duration = "";
        for (int i = 0; i < noteToken.length(); i++) {
            char currentChar = noteToken.charAt(i);
            if (Character.isDigit(currentChar)) {
                duration += currentChar;
            }
        }
        return Integer.parseInt(duration);
    }

    /**
     * Helper function for getDurations
     *
     * @param noteToken
     * @return
     */
    private boolean noteTokenContainsDuration(String noteToken) {
        for (int i = 0; i < noteToken.length(); i++) {
            if (Character.isDigit(noteToken.charAt(i))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Finds the smallest value in an array of doubles.
     * Modified from http://users.dickinson.edu/~braught/courses/cs132s02/classes/code/ArrayOps.src.html)
     *
     * @param doubleArray An array of integers.
     *
     * @return The smallest value in intArray.
     */
    public double findMin(double[] doubleArray) {

        // Use curMin to keep track of the smallest value
        // that has been seen so far...
        double curMin = doubleArray[0];

        // Examine each number in nums in turn and see
        // if it is smaller than the smallest number seen
        // so far.
        for (int i = 1; i < doubleArray.length; i++) {
            if (doubleArray[i] < curMin) {
                curMin = doubleArray[i];
            }
        }

        return curMin;
    }

    /**
     * Converts a binary pattern into a rhythm string that is
     * representative of what a bass drum would play
     * @param arr
     * @return
     */
    public String convertBinaryPatternToRhythm(int[] arr) {
        StringBuilder sb = new StringBuilder();

        sb.append("T[120] ");
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 1) {
                sb.append("[BASS_DRUM]i ");
            } else if (arr[i] == 0) {
                sb.append("Ri ");
            }
        }
        String rhythm = sb.toString();
        return rhythm;
    }

    /**
     *  This method converts a Binary Pattern object into a music string
     * using a piano voice as a default, and a C2 note to show rhythm
     * Method takes in the binary pattern to be converted, which track
     * to play on, and the time it should start playing.
     * @param binPat
     * @param voice
     * @param time
     * @return
     */
    public String convertBinaryPatternToMusicString(BinaryPattern binPat, int voice, int time) {

        //Initializes variables and default settings 
        String musicString = "V" + voice + " @" + time + " I[PIANO] ";
        int currentTime = time;
        double commonDenominator = binPat.getCommonDenominator();
        RhythmGenerator generator = new RhythmGenerator();
        int[] tenBase = generator.convertBinaryPatternToBaseTen(binPat.getBinaryPattern());
        double[] durations = new double[tenBase.length];

        //for loop intantiates each location of an array with the durations of 
        //each note in base 10.
        for (int i = 0; i < tenBase.length; i++) {
            durations[i] = tenBase[i] * commonDenominator * 4;
        }

        //for loop adds each note onto a music string while specifying the voice
        //and default note (C2) for each noteEvent.
        for (int i = 0; i < durations.length; i++) {
            musicString += "V" + voice + " @" + currentTime + " C5/" + durations[i] + " ";
            currentTime += durations[i] * 120;
        }

        return musicString;
    }

    /**
     * Creates a LilyString on the given midi note value from the given binary
     * Pattern.
     * 
     * @param binPat
     * @param noteValue
     * @return
     */
    public String convertBinaryPatternToLilyPond(BinaryPattern binPat, int noteValue) {
        int[] baseTenPat = this.convertBinaryPatternToBaseTen(binPat.getBinaryPattern());
        double leastCommonDenominator = binPat.getCommonDenominator();
        String[] durationsArray = new String[baseTenPat.length];
        double currentDuration;
        String lilyNote = this.convertMidiNoteValueToLilyNote(noteValue);
        String lilyString = "";

        for (int i = 0; i < baseTenPat.length; i++) {
            currentDuration = 1 / (baseTenPat[i] * leastCommonDenominator);
            if (currentDuration % 2 != 0) {
                int dottedDuration = (int) (currentDuration * 1.5);
                durationsArray[i] = Integer.toString(dottedDuration) + ".";
            } else {
                durationsArray[i] = Integer.toString((int) currentDuration);
            }
        }

        for (int i = 0; i < durationsArray.length; i++) {
            lilyString += lilyNote + durationsArray[i] + " ";
        }

        return lilyString;
    }

    /**
     * COME BACK
     * @param listOfNotes
     * @param binPat
     * @param voice
     * @param time
     * @return
     */
    public String mergeRhythmAndMelody(int[] listOfNotes, BinaryPattern binPat, int voice, int time) {

        //Initializes variables and default settings 
        String musicString = "V" + voice + " @" + time + " I[PIANO] ";
        int currentTime = time;
        double commonDenominator = binPat.getCommonDenominator();
        RhythmGenerator generator = new RhythmGenerator();
        int[] tenBase = generator.convertBinaryPatternToBaseTen(binPat.getBinaryPattern());
        double[] durations = new double[tenBase.length];

        //for loop intantiates each location of an array with the durations of 
        //each note in base 10.
        for (int i = 0; i < tenBase.length; i++) {
            durations[i] = tenBase[i] * commonDenominator;
        }

        //for loop adds each note onto a music string while specifying the voice
        //and default note (C2) for each noteEvent.
        for (int i = 0; i < durations.length; i++) {
            String currentNote = convertNoteValue(listOfNotes[i]);
            musicString += "V" + voice + " @" + currentTime + currentNote + durations[i] + " ";
            currentTime += durations[i] * 120; //this is voodoo.
        }

        return musicString;
    }

    /**
     * Takes an integer and mods it by 12 to get the note and checks string[] notenames
     * to get the letter value of the note
     * Then divides it by 12 and subtracts 1 to get the octave.
     * Both these values are appended onto a string, which is returned.
     * @param noteValue
     * @return
     */
    public String convertNoteValue(int noteValue) {
        String[] noteNames = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
        String string = "";

        int note = noteValue % 12;
        string += noteNames[note];

        int octave = noteValue / 12;
        string += octave;

        return string;
    }

    /**
     *
     * @param melody
     * @return
     */
    public int[] convertMelodyStructToBaseTen(MelodyStruct melody) {
        int[] pat = new int[melody.melodyArray.length];
        for (int i = 0; i < pat.length; i++) {
            if (melody.melodyArray[i].getMidiNoteValue() < 0) {
                pat[i] = 0;
            } else {
                pat[i] = 1;
            }
        }


        // System.out.println("In convertMelodyStructToBaseTen");
        // System.out.println(this.convertIntArrayToString(pat));
        // new array has length equal to number of 1's in pattern
        int oneCount = 0;
        for (int i = 0; i < pat.length; i++) {
            if (pat[i] == 1) {
                oneCount++;
            }
        }
        int[] newPat = new int[oneCount];


        // count until next 1 appears
        int binaryCount = 0;
        int index = -1;

        for (int i = 0; i < pat.length; i++) {

            if (pat[i] == 1) {
                index++;
                binaryCount = 0;
                binaryCount++;
            }
            if (pat[i] == 0) {
                binaryCount++;
            }

            newPat[index] = binaryCount;

        }

        return newPat;
    }

    /**
     * Given a MelodyStruct, produces an int[] with all the pitch values
     * that are found in the MelodyStruct.
     * 
     * @param melody
     * @return An int[] with all the pitch values in melody.
     */
    public int[] getListOfNotes(MelodyStruct melody) {
        //System.out.println(melody);
        int noteCount = 0;
        int[] binPat = melody.binPat.getBinaryPattern();
        for (int i = 0; i < binPat.length; i++) {
            if (melody.melodyArray[i].getMidiNoteValue() > -1) {
                noteCount++;
            }
        }

        int[] listOfNotes = new int[noteCount];
        noteCount = 0;

        for (int i = 0; i < binPat.length; i++) {
            if (melody.melodyArray[i].getMidiNoteValue() > -1) {
                listOfNotes[noteCount] = melody.melodyArray[i].getMidiNoteValue();
                noteCount++;
            }
        }

        return listOfNotes;
    }

    /**
     * Converts a MelodyStruct to a MusicString.
     *
     * @param melody The MelodyStruct to be converted.
     * @param voice The voice to be assigned to the MusicString (default is piano).
     * @param time The tempo to be assigned to the MusicString (default is 120).
     * @return A MusicString representing the combination of the MelodyStruct,
     *         voice, and tempo values.
     */
    public String convertMelodyStructToMusicString(MelodyStruct melody, int voice, int time) {
        //System.out.println("In melodyStructToMusicString");
        String musicString="";// = "V" + voice + " @" + time + " I[PIANO] ";
        int currentTime = time;
        int[] durations = this.convertMelodyStructToBaseTen(melody);
        System.out.println(this.convertIntArrayToString(durations));
        int[] noteValues = this.getListOfNotes(melody);
        System.out.println(this.convertIntArrayToString(noteValues));
        double[] actualDurations = new double[durations.length];
        double commonDenominator = melody.getCommonDenominator();

        //System.out.println("currentTime: " + currentTime);
        //System.out.println("durations: " + this.convertIntArrayToString(durations));
        //System.out.println("noteValues: " + this.convertIntArrayToString(noteValues));
        //System.out.println("commonDenominator: " + commonDenominator);

        //System.out.println("ActualDurations.length: " + durations.length);
        //System.out.println("noteValues.length: " + noteValues.length);

        for (int i = 0; i < actualDurations.length; i++) {
            actualDurations[i] = (double) durations[i] * commonDenominator;
        }
        System.out.println("Actual Durations:" + this.convertDoubleArrayToString(actualDurations));
        //    System.out.println(this.convertDoubleArrayToString(actualDurations));
        //    System.out.println("NoteValues:" + this.convertIntArrayToString(noteValues));

        for (int i = 0; i < actualDurations.length; i++) {
            String currentNote = this.convertNoteValue(noteValues[i]);
           // musicString += "V" + voice + " @" + currentTime + " " + currentNote + "/" + actualDurations[i] + " ";
            musicString +=  currentNote + "/" + actualDurations[i] + " ";
            currentTime += actualDurations[i] * 120;
        }

        return musicString;
    }

    /**
     *
     *
     * @param melody The MelodyStruct to be converted
     * @return A LilyPond noteString
     */
    public String convertMelodyStructToLilyPond(MelodyStruct melody) {
        System.out.println("In converter");
        /*
         * Part 1: Converting melody.binPat to LilyPond durations
         */
        int[] durations = this.convertMelodyStructToBaseTen(melody);
        double leastCommonDenominator = melody.binPat.getCommonDenominator();
        String[] lilyDurations = new String[durations.length];
        double currentDuration;

        for (int i = 0; i < durations.length; i++) {
            currentDuration = 1 / (durations[i] * leastCommonDenominator);
            if (currentDuration % 2 != 0) {
                int dottedDuration = (int) (currentDuration * 1.5);
                lilyDurations[i] = Integer.toString(dottedDuration) + ".";
            } else {
                lilyDurations[i] = Integer.toString((int) currentDuration);
            }
        }

        /*
         * Part 2: converting noteValues to LilyPond notes
         */
        int[] midiNoteValues = this.getListOfNotes(melody);
        System.out.println("here");
        String[] lilyNotes = new String[midiNoteValues.length];
<<<<<<< .mine
        System.out.println(melody.chromatic);
=======
>>>>>>> .r351
        for (int i = 0; i < midiNoteValues.length; i++) {
            lilyNotes[i] = this.convertMidiNoteValueToLilyNote(midiNoteValues[i], melody.chromatic);
        }

        System.out.println("there");

        /*
         * Part 3: combining lilyNoteValues and durations into a noteString
         */
        String noteString = lilyNotes[0] + lilyDurations[0] + " ";
        for (int i = 1; i < lilyNotes.length; i++) {
            //if (lilyDurations[i].equals(lilyDurations[i-1])) {
            //    noteString += lilyNotes[i] + " ";
            //} else {
            noteString += lilyNotes[i] + lilyDurations[i] + " ";
        //}
        }

        return noteString;
    }

    /**
     * Taking an integer duration, prints out a 1 and a list of 0's equal to
     * the length of the duration
     * @param duration
     * @return
     */
    public int[] getBinaryEquivalent(int duration) {
        int[] intArr = new int[duration];
        intArr[0] = 1;
        for (int i = 1; i < duration; i++) {
            intArr[i] = 0;
        }
        return intArr;
    }

    /**
     * Converts an int[] into its String representation.
     * @param pattern
     * @return convertedArray
     */
    public String convertIntArrayToString(int[] pattern) {
        String convertedArray = "";
        for (int i = 0; i < pattern.length; i++) {
            convertedArray += pattern[i];
            if (i != pattern.length - 1) {
                convertedArray += ",";
            }
        }
        return convertedArray;
    }

    public String convertStringArrayToString(String[] pattern) {
        String convertedArray = "";
        for (int i = 0; i < pattern.length; i++) {
            convertedArray += pattern[i];
            if (i != pattern.length - 1) {
                convertedArray += ",";
            }
        }
        return convertedArray;
    }

    /**
     * Converts a double[] into its String representation.
     *
     * @param pattern
     * @return
     */
    public String convertDoubleArrayToString(double[] pattern) {
        String convertedArray = "";
        for (int i = 0; i < pattern.length; i++) {
            convertedArray += pattern[i] + ",";
        }
        return convertedArray;
    }

    public String transposeOctave(String musicString) {
        int index = 0;

        while (musicString.substring(index).contains("/")) {

            //Submethod that can account for 1 or 2 digit octaves
            int octave = this.getOctave(musicString.substring(index));

            //Adjusts for the proper index based on the number of digits
            if (octave < 10) {

                //adds the substring before the octave in question,
                //increases the octave, and adds the rest onto it.
                musicString = musicString.substring(0, index + musicString.substring(index).indexOf("/") - 1) + (octave + 1) + musicString.substring(index + musicString.substring(index).indexOf("/"));
                index += musicString.substring(index).indexOf("/") + 1;
            } else {
                //Slight difference for the change in the first substring
                musicString = musicString.substring(0, index + musicString.substring(index).indexOf("/") - 2) + (octave + 1) + musicString.substring(index + musicString.substring(index).indexOf("/"));
                index += musicString.substring(index).indexOf("/") + 1;
            }
        }

        return musicString;
    }

    /**
     * Helper method to get the numerical values of a one or two digit octave
     * of a note event in a JFugue musicString.
     *
     * @param newString
     * @return
     */
    public int getOctave(String newString) {
        int octave = 0;
        int index = newString.indexOf("/");

        //Checks for a possible 10s value
        if (Character.isDigit(newString.charAt(index - 2))) {
            int tens = Character.getNumericValue(newString.charAt(index - 2));
            int ones = Character.getNumericValue(newString.charAt(index - 1));
            octave = tens * 10 + ones;
        } else {
            octave = Character.getNumericValue(newString.charAt(index - 1));
        }

        return octave;
    }

    /**
     * Converts an int[] binary pattern to an int[] base ten pattern.
     * @param binPat
     * @return newPat
     */
    public int[] convertBinaryPatternToBaseTen(int[] binPat) {
        int[] baseTenArray;
        // Counter for the number of 1's in binPat
        int oneCount = 0;

        // Set the length of baseTenArray to the number of 1's in binPat
        for (int bin : binPat) {
            if (bin == 1) {
                oneCount++;
            }
        }
        baseTenArray = new int[oneCount];

        // Count until next 1 in binPat
        int binaryCount = 0;
        // Current position in baseTenArray
        int index = -1;

        for (int bin : binPat) {
            if (bin == 1) {
                index++;
                binaryCount = 1;
            } else {
                binaryCount++;
            }
            baseTenArray[index] = binaryCount;
        }

        return baseTenArray;
    }

    public MelodyStruct convertLilyPondToMelodyStruct(LilyPond lily){
        MelodyAnalyzer analyzer = new MelodyAnalyzer();
        MelodyStruct melody = analyzer.createAnalysis(lily);
        return melody;
    }
    /**
     * Converts an int[] base ten pattern to an int[] binary pattern.
     *
     * @param tenBase
     * @return
     */
    public int[] convertBaseTenToBinary(int[] tenBase) {
        int patternLength = 0;
        int index = 0;
        int[] patternArray;

        // Determine the length of the resultant array by calculating the sum
        // of durationsIntArray
        for (int i = 0; i < tenBase.length; i++) {
            patternLength += tenBase[i];
        }
        // Set the length of patternArray to the value calculated above
        patternArray = new int[patternLength];

        // Fill in patternArray with 1's and 0's.
        for (int i = 0; i < tenBase.length; i++) {
            patternArray[index] = 1;
            index++;
            for (int j = 1; j < tenBase[i]; j++) {
                patternArray[index] = 0;
                index++;
            }
        }

        return patternArray;
    }

    /**
     * Converts an integer midi note value to a LilyPond note string (i.e.,
     * 61 -> cis')
     *
     * @param noteValue
     * @return LilyPond note string.
     */
    public String convertMidiNoteValueToLilyNote(int noteValue) {
        String[] notes = {"c", "cis", "d", "ees", "e", "f", "fis", "g", "aes", "a", "bes", "b"};
        int remainder = noteValue % 12;
        String noteLetter = "";
        int octaveNumber = ((noteValue - remainder) / 12) - 4;
        String noteOctave = "";

        noteLetter = notes[remainder];

        if (octaveNumber > 0) {
            for (int i = 0; i < octaveNumber; i++) {
                noteOctave += "'";
            }
        } else if (octaveNumber < 0) {
            for (int i = octaveNumber; i < 0; i++) {
                noteOctave += ",";
            }
        }

        return noteLetter + noteOctave;
    }

    /**
     * Converts an integer midi note value to a LilyPond note string (i.e.,
     * 61 -> cis')
     *
     * @param noteValue
     * @return LilyPond note string.
     */
    public String convertMidiNoteValueToLilyNote(int noteValue, String[] notes) {
        //String[] notes = {"c", "cis", "d", "ees", "e", "f", "fis", "g", "aes", "a", "bes", "b"};

        int remainder = noteValue % 12;
        String noteLetter = "";
        int octaveNumber = ((noteValue - remainder) / 12) - 4;
        String noteOctave = "";

        noteLetter = notes[remainder];

        if (octaveNumber > 0) {
            for (int i = 0; i < octaveNumber; i++) {
                noteOctave += "'";
            }
        } else if (octaveNumber < 0) {
            for (int i = octaveNumber; i < 0; i++) {
                noteOctave += ",";
            }
        }

        return noteLetter + noteOctave;
    }

    /**
     * Converts a LilyPond note string to an integer midi note value (i.e.,
     * cis' -> 61)
     * 
     * @param noteToken
     * @return Integer midi note value
     */
    public int convertLilyNoteToMidiNoteValue(String noteToken) {
        char noteLetter = noteToken.charAt(0);
        int noteValue = -1;
        int noteOctave = 4;
        int midiNoteValue;

        // Initializes noteValue based on the the first character in noteToken
        switch (noteLetter) {
            case 'c':
                noteValue = 0;
                break;
            case 'd':
                noteValue = 2;
                break;
            case 'e':
                noteValue = 4;
                break;
            case 'f':
                noteValue = 5;
                break;
            case 'g':
                noteValue = 7;
                break;
            case 'a':
                noteValue = 9;
                break;
            case 'b':
                noteValue = 11;
                break;
        }

        // Adjusts noteValue to account for sharps and flats
        if (noteToken.contains("S")) {
            noteValue++;
        } else if (noteToken.contains("F")) {
            noteValue--;
        }

        // Increments noteOctave based on the number of apostrophes/commas
        for (int i = 0; i < noteToken.length(); i++) {
            if (noteToken.charAt(i) == '\'') {
                noteOctave++;
            } else if (noteToken.charAt(i) == ',') {
                noteOctave--;
            }
        }

        midiNoteValue = noteValue + (noteOctave * 12);

        return midiNoteValue;
    }

    /**
     * Takes in a double number in base 10 and converts it to its binary counterpart
     * @param number
     * @return output
     */
    public String convertDecimalToBinary(double number) {
        String output = "";
        if (number >= 2) {//if the number is greater than 2
            return "Bad Number Input";//return a useless statement
        } else if (number >= 1) {//if greater than 1
            output += "1.";//set a 1 to the output before the decimal point
            number--;//decrease the number by one
        } else {
            output += "0.";//add the decimal point
        }
        while (output.length() < 8) {//keep loop if number is greater than 0 and the length of output is less than 8
            number *= 2;//multiply number by 2
            if (number >= 1) {//if result is greater than 1
                output += "1";//append 1 to output
                number--;//subtract 1 from number
            } else {
                output += "0";//else append a 0 to output
            }
        }
        return output;
    }
}