/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package schillingerapp;

/**
 *
 * @author anparks
 */
public class RhythmGenerator {

    public enum permType {

        SWAP, REPEAT1, REPEAT2, CIRCPERM, FRACTIONED, BALANCE
    }

    /**
     * @param   rhythmPat   A rhythm pattern in int[] form.
     * @return  The resulting pattern obtained by Schillinger's balancing algorithm.
     */
    public int[] balanceRhythm(int[] rhythmPat) throws MyException {

        System.out.println("Welcom to balanceRhythm!");
        SchillingerDB schDB = new SchillingerDB();
        Converter converter = new Converter();
        int index = schDB.getIndexFromDB(rhythmPat);
        int[] resultingPat;
        RhythmPattern schillingerPattern = schDB.getSchillingerPatternFromDB(index);
        int[] counterpartPat = this.returnFractionedCounterpart(index);

        System.out.println("index: " + index + "\n schillingerPat: " + schillingerPattern);

        // For rhythm patterns with only 2 generators:
        // 3 generator patterns will throw MyException
        if (index < 38) {
            int a = Character.getNumericValue(schillingerPattern.getDescription().charAt(0));
            int b = Character.getNumericValue(schillingerPattern.getDescription().charAt(2));
            int m = a / b;
            // For fractioned patterns.
            if (index % 2 != 0) {
<<<<<<< .mine
=======
                // "m" is the number of times to repeat the unfractioned pattern
                int m = a / b;
>>>>>>> .r196
                // Final length of the resulting pattern
                int patLength = m * counterpartPat.length + (a * a - m * a * b);
                // Creates a new int[]
                resultingPat = new int[patLength];
                // Duplicates the counterpartPat m times
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < counterpartPat.length; j++) {
                        resultingPat[j + counterpartPat.length * i] = counterpartPat[j];
                    }
                }
                // Creates an int[] with the proper duration of the last note
                int[] lastNote = converter.getBinaryEquivalent(a * a - m * a * b);
                // Adds on the last note to the resulting pattern
                for (int i = 0; i < lastNote.length; i++) {
                    resultingPat[i + counterpartPat.length * m] = lastNote[i];
                }
                return resultingPat;
            } else {
<<<<<<< .mine

=======
                // For unfractioned patters: find a different permutation method
                return counterpartPat;
>>>>>>> .r196
            }
        } else {
            // Not yet implemented.
            throw new MyException("This pattern has three generators");
        }
    }

    /**
     * CreateRhythm calls all needed methods based in input of musicString,
     * and permutation types that do not need any other parameters.  Returns
     * a BinaryPattern.
     * 
     * @param musicString
     * @param permutation
     * @return
     */
    public BinaryPattern createRhythm(
            String musicString, permType permutation) {
        Converter converter = new Converter();
        BinaryPattern binPat = converter.convertMusicStringToBinaryPattern(musicString);

        switch (permutation) {
            case SWAP:
                binPat.setBinaryPattern(this.swapFirstHalfWithSecond(binPat.getBinaryPattern()));
                break;

            case REPEAT1:
                binPat.setBinaryPattern(this.repeatFirstHalf(binPat.getBinaryPattern()));
                break;

            case REPEAT2:
                binPat.setBinaryPattern(repeatSecondHalf(binPat.getBinaryPattern()));
                break;

        }





        return binPat;
    }

    public BinaryPattern createRhythm(
            BinaryPattern binPat, permType permutation) {

        switch (permutation) {
            case SWAP:
                binPat.setBinaryPattern(this.swapFirstHalfWithSecond(binPat.getBinaryPattern()));
                break;

            case REPEAT1:
                binPat.setBinaryPattern(this.repeatFirstHalf(binPat.getBinaryPattern()));
                break;

            case REPEAT2:
                binPat.setBinaryPattern(repeatSecondHalf(binPat.getBinaryPattern()));
                break;

        }





        return binPat;
    }

    /**
     * createRhythm works to call all needed methods, and has a parameter input
     * for those generators that require more information.  Returns the
     * generated BinaryPattern.
     *
     * @param musicString
     * @param permutation
     * @param index
     * @return
     */
    public BinaryPattern createRhythm(
            String musicString, permType permutation, int index) {
        Converter converter = new Converter();
        BinaryPattern binPat = converter.convertMusicStringToBinaryPattern(musicString);

        switch (permutation) {
            case CIRCPERM:
                binPat.setBinaryPattern(this.circularlyPermutePattern(binPat.getBinaryPattern(), index));
                break;

            case FRACTIONED:
                binPat.setBinaryPattern(this.returnFractionedCounterpart(index));
                break;

        }





        return binPat;
    }

    public BinaryPattern createRhythm(
            BinaryPattern binPat, permType permutation, int index) {

        switch (permutation) {
            case CIRCPERM:
                binPat.setBinaryPattern(this.circularlyPermutePattern(binPat.getBinaryPattern(), index));
                break;

            case FRACTIONED:
                binPat.setBinaryPattern(this.returnFractionedCounterpart(index));
                break;

        }





        return binPat;
    }

    /**
     * This method works to generate the rhythm possibilities based in an
     * inputted binary pattern.  It calls all of the other methods in the class
     * designed to generate a unique rhythm and compiles them into a music
     * string where the original plays first, followed by the other options.
     *
     * @param binPat
     * @return
     */
    public String generatePossibilites(
            BinaryPattern binPat) {

        // Initializes variables to be used
        String musicString = "";
        Converter converter = new Converter();
        double commonDenominator = binPat.commonDenominator;
        double nextStartTime = binPat.getBinaryPattern().length * commonDenominator * 480;

        //Creates binary patterns of the results
        BinaryPattern swap = new BinaryPattern(this.swapFirstHalfWithSecond(binPat.getBinaryPattern()), commonDenominator);
        BinaryPattern repeatFirst = new BinaryPattern(this.repeatFirstHalf(binPat.getBinaryPattern()), commonDenominator);
        BinaryPattern repeatSecond = new BinaryPattern(this.repeatSecondHalf(binPat.getBinaryPattern()), commonDenominator);
        BinaryPattern circPerm = new BinaryPattern(this.circularlyPermutePattern(binPat.getBinaryPattern(), 4), commonDenominator);
        BinaryPattern rep = new BinaryPattern(this.repeatFirstHalf(binPat.getBinaryPattern()), commonDenominator);

        //Adds the next possibility onto the MusicString, each on a unique track
        //and starting at the end of the original pattern.
        musicString +=
                converter.convertBinaryPatternToMusicString(binPat, 0, 0);
        musicString +=
                converter.convertBinaryPatternToMusicString(swap, 1, (int) nextStartTime);
        musicString +=
                converter.convertBinaryPatternToMusicString(repeatFirst, 2, (int) nextStartTime);
        musicString +=
                converter.convertBinaryPatternToMusicString(repeatSecond, 3, (int) nextStartTime);
        musicString +=
                converter.convertBinaryPatternToMusicString(circPerm, 4, (int) nextStartTime);
        musicString +=
                converter.convertBinaryPatternToMusicString(rep, 5, (int) nextStartTime);

        return musicString;
    }

    public int[] swapFirstHalfWithSecond(int[] pat) {

        int[] newPat = new int[pat.length];
        int[] firstHalf = this.getFirstHalfPattern(pat);
        int[] secondHalf = this.getLastHalfPattern(pat);
        int patCount = 0;

        for (int i = 0; i <
                secondHalf.length; i++) {
            newPat[i] = secondHalf[i];
            patCount++;

        }





        for (int i = 0; i <
                firstHalf.length; i++) {
            newPat[i + patCount] = firstHalf[i];
        }

        return newPat;

    }

    public int[] repeatFirstHalf(int[] pat) {
        int[] newPat = new int[pat.length];
        int[] firstHalf = this.getFirstHalfPattern(pat);
        int patCount = 0;

        for (int i = 0; i <
                firstHalf.length; i++) {
            newPat[i] = firstHalf[i];
            patCount++;

        }





        for (int i = 0; i <
                firstHalf.length; i++) {
            newPat[i + patCount] = firstHalf[i];
        }

        return newPat;

    }

    public int[] repeatSecondHalf(int[] pat) {

        int[] newPat = new int[pat.length];
        int[] secondHalf = this.getLastHalfPattern(pat);

        int patCount = 0;

        for (int i = 0; i <
                secondHalf.length; i++) {
            newPat[i] = secondHalf[i];
            patCount++;

        }





        for (int i = 0; i <
                secondHalf.length; i++) {
            newPat[i + patCount] = secondHalf[i];
        }

        return newPat;

    }

    /* Returns the Fractioned or Unfractioned counterpart to the pattern index
     * found in HitlistDB */
    public int[] returnFractionedCounterpart(int index) {
        SchillingerDB database = new SchillingerDB();
        int[] newPat;

        if (index % 2 == 0) {
            newPat = database.getPatternFromDB(index + 1);
        } else {
            newPat = database.getPatternFromDB(index - 1);
        }

        return newPat;
    }

    public int[] circularlyPermutePattern(int[] binPat, int offset) {
        int[] tenBase = this.convertBinaryPatternToBaseTen(binPat);
        int[] newPat = new int[tenBase.length];

        for (int i = 0; i <
                tenBase.length - offset; i++) {
            newPat[i] = tenBase[i + offset];
        }

        for (int i = 0; i <
                offset; i++) {
            newPat[tenBase.length - offset + i] = tenBase[i];
        }

        int[] newBinaryPat = this.convertBaseTenToBinary(newPat);

        return newBinaryPat;
    }

    /* Helper method to initials the first half of a RhythmPattern with odd
     * middle objects included in both halves*/
    public int[] getFirstHalfPattern(int[] pattern) {
        double originalLength = pattern.length;
        int[] firstHalf = new int[(int) Math.ceil(originalLength / 2)];

        for (int i = 0; i <
                firstHalf.length; i++) {
            firstHalf[i] = pattern[i];
        }

        return firstHalf;
    }

    /* Helper method to initials the last half of a RhythmPattern with odd
     * middle objects included in both halves*/
    public int[] getLastHalfPattern(int[] pattern) {
        double originalLength = pattern.length;
        int[] lastHalf = new int[(int) Math.ceil(originalLength / 2)];

        for (int i = 0; i <
                lastHalf.length; i++) {
            lastHalf[i] = pattern[i + (int) Math.floor(originalLength / 2)];
        }

        return lastHalf;
    }

    public int[] convertBinaryPatternToBaseTen(int[] pat) {

        // new array has length equal to number of 1's in pattern
        int oneCount = 0;
        for (int i = 0; i <
                pat.length; i++) {
            if (pat[i] == 1) {
                oneCount++;
            }

        }
        int[] newPat = new int[oneCount];


        // count until next 1 appears
        int binaryCount = 0;
        int index = -1;

        for (int j = 0; j <
                pat.length; j++) {

            if (pat[j] == 1) {
                index++;
                binaryCount =
                        0;
                binaryCount++;

            }




            if (pat[j] == 0) {
                binaryCount++;
            }

            newPat[index] = binaryCount;

        }

        return newPat;
    }

    public int[] convertBaseTenToBinary(int[] tenBase) {
        int[] binaryPat;
        int length = 0;
        int index = 0;

        for (int i = 0; i <
                tenBase.length; i++) {
            length += tenBase[i];
        }

        binaryPat = new int[length];

        for (int i = 0; i <
                tenBase.length; i++) {
            for (int j = 0; j <
                    tenBase[i]; j++) {
                if (j == 0) {
                    binaryPat[index] = 1;
                } else {
                    binaryPat[index + j] = 0;
                }

            }
            index += tenBase[i];
        }

        return binaryPat;
    }
}

