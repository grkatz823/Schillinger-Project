package schillingerapp;

import java.io.*;
import javax.swing.*;
import org.jfugue.*;

/**
 *
 * @author jestuart
 */
public class SchillingerGUI extends javax.swing.JFrame {

    public JFileChooser fc;
    public String input;
    public String output;
    public String key;
    public boolean findKey;
    public boolean checkPDF;

    /** Creates new form SchillingerGUI3 */
    public SchillingerGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputLabel = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        inputButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        resultTextField = new javax.swing.JTextField();
        resultButton = new javax.swing.JButton();
        keyLabel = new javax.swing.JLabel();
        keyTextField = new javax.swing.JTextField();
        keyCheckBox = new javax.swing.JCheckBox();
        pdfCheckBox = new javax.swing.JCheckBox();
        generateMusicButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        schPatMatchLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        schPatMatchTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        permInfoTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Composer's Intelligent Assistant");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        inputLabel.setText("Please load midi file:");

        inputTextField.setText("/home/jestuart/NetBeansProjects/SchillingerApp/fourBarMelody.mid");

        inputButton.setText("Browse");
        inputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputButtonActionPerformed(evt);
            }
        });

        outputLabel.setText("Save results to:");

        resultTextField.setText("TestResults.mid");

        resultButton.setText("Browse");
        resultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultButtonActionPerformed(evt);
            }
        });

        keyLabel.setText("Please enter key: (Ex. AMajor)");

        keyCheckBox.setSelected(true);
        keyCheckBox.setText("Find key automatically");

        pdfCheckBox.setText("Open results as pdf");
        pdfCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfCheckBoxActionPerformed(evt);
            }
        });

        generateMusicButton.setText("Generate Music");
        generateMusicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMusicButtonActionPerformed(evt);
            }
        });

        schPatMatchLabel.setText("Schillinger Match:");

        schPatMatchTextArea.setColumns(20);
        schPatMatchTextArea.setEditable(false);
        schPatMatchTextArea.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 13));
        schPatMatchTextArea.setRows(5);
        jScrollPane1.setViewportView(schPatMatchTextArea);

        jLabel1.setText("Permutation Information");

        permInfoTextArea.setColumns(20);
        permInfoTextArea.setEditable(false);
        permInfoTextArea.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 13));
        permInfoTextArea.setRows(5);
        jScrollPane2.setViewportView(permInfoTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addComponent(inputLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                            .addComponent(resultTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resultButton)
                            .addComponent(inputButton)))
                    .addComponent(keyLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pdfCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                                .addComponent(generateMusicButton))
                            .addComponent(keyCheckBox)))
                    .addComponent(schPatMatchLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputButton)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultButton)
                    .addComponent(resultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdfCheckBox)
                    .addComponent(generateMusicButton))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(schPatMatchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pdfCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pdfCheckBoxActionPerformed

    private void resultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultButtonActionPerformed
        fc = new JFileChooser();
        fc.addChoosableFileFilter(new MidiFileFilter());
        if (evt.getSource() == resultButton) {
            int returnVal = fc.showOpenDialog(SchillingerGUI.this);

            String musicString = "";
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                output = fc.getSelectedFile().toString();
                resultTextField.setText(output);
            }
        }
    }//GEN-LAST:event_resultButtonActionPerformed
    Player player = new Player();
    TimeNoteListener myListener = new TimeNoteListener();
    Converter converter = new Converter();
    //    System.out.println("Input: " + rawInput + "\nOutput: " + rawOutput);

    private void inputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputButtonActionPerformed
        fc = new JFileChooser();
        fc.addChoosableFileFilter(new MidiFileFilter());

        if (evt.getSource() == inputButton) {
            int returnValue = fc.showOpenDialog(SchillingerGUI.this);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                input = fc.getSelectedFile().toString();
                inputTextField.setText(input);

                if (resultTextField.getText().equals("TestResults.mid")) {
                    resultTextField.setText(getDirectory(input) + "TestResults.mid");
                }
            }
        }
    }//GEN-LAST:event_inputButtonActionPerformed

    private void generateMusicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMusicButtonActionPerformed


        String rawInput = inputTextField.getText();
        String rawOutput = resultTextField.getText();

        findKey = keyCheckBox.isSelected();
        checkPDF = pdfCheckBox.isSelected();
        key = keyTextField.getText();
        input = rawInput.substring(rawInput.lastIndexOf("/") + 1);
        output = rawOutput.substring(rawOutput.lastIndexOf("/") + 1);

        String musicString = "";
        KeyFinder finder = new KeyFinder();
        Player player = new Player();
        TimeNoteListener myListener = new TimeNoteListener();
        Converter converter = new Converter();
        //    System.out.println("Input: " + rawInput + "\nOutput: " + rawOutput);

<<<<<<< .mine
        TimeNoteListener aListener = new TimeNoteListener();
        Converter conv = new Converter();
        Player aPlayer = new Player();
        //    System.out.println("Input: " + rawInput + "\nOutput: " + rawOutput);

=======
>>>>>>> .r245
        if (findKey) {
<<<<<<< .mine
            try {

                MusicGenerator musicMaker = new MusicGenerator();
                aListener.parseString(input);
                musicString = aListener.getParsedString();
                String testResults = musicMaker.generatePossibilities(musicString);
                permInfoTextArea.setText(musicMaker.permInfo);
                aPlayer.saveMidi(testResults, new File(output));
            } catch (Exception e) {
                System.err.println("Error: " + e);
            }
=======
            try {
                MusicGenerator musicMaker = new MusicGenerator();
                myListener.parseString(input);
                musicString = myListener.getParsedString();
                String testResults = musicMaker.generatePossibilities(musicString);
                permInfoTextArea.setText(musicMaker.permInfo);
                player.saveMidi(testResults, new File(output));
            } catch (Exception e) {
                System.err.println("Error: " + e);
            }
>>>>>>> .r245
        } else {
            int intKey = finder.stringToIndex(key);
<<<<<<< .mine
            try {
                MusicGenerator musicMaker = new MusicGenerator(intKey);
                aListener.parseString(input);
                musicString = aListener.getParsedString();
                String testResults = musicMaker.generatePossibilities(musicString);
                permInfoTextArea.setText(musicMaker.permInfo);
                aPlayer.saveMidi(testResults, new File(output));
            } catch (Exception e) {
                System.err.println("Error: " + e);
            }

=======
            try {
                MusicGenerator musicMaker = new MusicGenerator(intKey);
                myListener.parseString(input);
                musicString = myListener.getParsedString();
                String testResults = musicMaker.generatePossibilities(musicString);
                permInfoTextArea.setText(musicMaker.permInfo);
                player.saveMidi(testResults, new File(output));
            } catch (Exception e) {
                System.err.println("Error: " + e);
            }

>>>>>>> .r245
        }

<<<<<<< .mine
        BinaryPattern binPat =  conv.convertMusicStringToBinaryPattern(musicString);
=======
        BinaryPattern binPat = converter.convertMusicStringToBinaryPattern(musicString);
>>>>>>> .r245
        HitListDB hitList = new HitListDB(binPat);
        hitList.sortDB();
        int[] index = hitList.getNthMatch(1);
        int topMatch = hitList.hitListMatrix[index[0]][index[1]].getPatternIndex();
        String topMatches = "Input Matched to Pattern: " + topMatch + "\n";
        topMatches += hitList.topMatchesString(1);
        schPatMatchTextArea.setText(topMatches);

        if (checkPDF) {
            //Run shell script to covert TestResults.mid to TestResults
            try {

                String cmd = "/home/grkatz/NetBeansProjects/SchillingerApp/CIAscript.sh";

                Runtime run = Runtime.getRuntime();
                Process pr = run.exec(cmd);
            //pr.waitFor();
            //System.exit(0);
            } catch (Exception e) {
                System.out.println(e);
                System.exit(-1);
            }
        }
    }//GEN-LAST:event_generateMusicButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SchillingerGUI().setVisible(true);
            }
        });
    }

    public String getDirectory(String fileName) {
        return fileName.substring(0, fileName.lastIndexOf("/") + 1);
    }

    public String getInputFile() {
        return input;
    }

    public String getOutputFile() {
        return output;
    }

    public Boolean findKey() {
        return findKey;
    }

    public String getKey() {
        return key;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateMusicButton;
    private javax.swing.JButton inputButton;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox keyCheckBox;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JTextField keyTextField;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JCheckBox pdfCheckBox;
    private javax.swing.JTextArea permInfoTextArea;
    private javax.swing.JButton resultButton;
    private javax.swing.JTextField resultTextField;
    private javax.swing.JLabel schPatMatchLabel;
    private javax.swing.JTextArea schPatMatchTextArea;
    // End of variables declaration//GEN-END:variables
}
